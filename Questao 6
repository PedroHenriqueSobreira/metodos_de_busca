#include <stdio.h>

#define TAMANHO_VETOR 15

int numeroExiste(int vetor[], int tamanho, int numero) {
    for (int i = 0; i < tamanho; i++) {
        if (vetor[i] == numero) {
            return 1; // Retorna 1 se o número existe no vetor
        }
    }
    return 0; // Retorna 0 se o número não existe no vetor
}

void cadastrarNumeros(int vetor[]) {
    printf("Digite 15 números inteiros (sem repetições):\n");
    for (int i = 0; i < TAMANHO_VETOR; i++) {
        int numero;
        do {
            printf("Número %d: ", i + 1);
            scanf("%d", &numero);
            if (numeroExiste(vetor, i, numero)) {
                printf("Número repetido! Digite um número diferente.\n");
            }
        } while (numeroExiste(vetor, i, numero));
        vetor[i] = numero;
    }
}

void ordenarNumeros(int vetor[]) {
    for (int i = 0; i < TAMANHO_VETOR - 1; i++) {
        int min_index = i;
        for (int j = i + 1; j < TAMANHO_VETOR; j++) {
            if (vetor[j] < vetor[min_index]) {
                min_index = j;
            }
        }

        if (min_index != i) {
            int temp = vetor[i];
            vetor[i] = vetor[min_index];
            vetor[min_index] = temp;
        }
    }
}

int buscaSequencial(int vetor[], int tamanho, int numero, int *comparacoes) {
    for (int i = 0; i < tamanho; i++) {
        (*comparacoes)++;
        if (vetor[i] == numero) {
            return i; // Retorna o índice do número encontrado
        }
    }
    return -1; // Retorna -1 se o número não foi encontrado
}

int buscaBinaria(int vetor[], int tamanho, int numero, int *comparacoes) {
    int esquerda = 0;
    int direita = tamanho - 1;
    
    while (esquerda <= direita) {
        (*comparacoes)++;
        int meio = (esquerda + direita) / 2;
        if (vetor[meio] == numero) {
            return meio; // Retorna o índice do número encontrado
        } else if (vetor[meio] < numero) {
            esquerda = meio + 1; // Busca na metade direita
        } else {
            direita = meio - 1; // Busca na metade esquerda
        }
    }
    return -1; // Retorna -1 se o número não foi encontrado
}

int main() {
    int numeros[TAMANHO_VETOR];
    int numero_busca;
    int posicao;
    int comparacoes_sequencial = 0;
    int comparacoes_binaria = 0;

    // Passo 1: Cadastro dos números
    cadastrarNumeros(numeros);

    // Passo 2: Ordenação dos números
    ordenarNumeros(numeros);

    // Passo 3: Busca sequencial
    printf("\nDigite um número para buscar no vetor: ");
    scanf("%d", &numero_busca);
    posicao = buscaSequencial(numeros, TAMANHO_VETOR, numero_busca, &comparacoes_sequencial);

    if (posicao != -1) {
        printf("Número encontrado na posição %d.\n", posicao);
        if (posicao % 2 == 0) {
            printf("Está na posição par do vetor.\n");
        } else {
            printf("Está na posição ímpar do vetor.\n");
        }
    } else {
        printf("Número não encontrado no vetor.\n");
    }
    printf("Número de comparações na busca sequencial: %d\n", comparacoes_sequencial);

    // Passo 4: Busca binária
    printf("\nDigite um número para buscar no vetor (usando busca binária): ");
    scanf("%d", &numero_busca);
    posicao = buscaBinaria(numeros, TAMANHO_VETOR, numero_busca, &comparacoes_binaria);

    if (posicao != -1) {
        printf("Número encontrado na posição %d.\n", posicao);
        if (posicao % 2 == 0) {
            printf("Está na posição par do vetor.\n");
        } else {
            printf("Está na posição ímpar do vetor.\n");
        }
    } else {
        printf("Número não encontrado no vetor.\n");
    }
    printf("Número de comparações na busca binária: %d\n", comparacoes_binaria);

    return 0;
}
